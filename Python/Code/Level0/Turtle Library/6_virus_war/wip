# https: // www.tcl.tk/man/tcl8.4/TkCmd/keysyms.htm

import turtle
import random
import time
import pygame

window_width = 600
window_height = 600

player_speed = 2

num_of_enemy_costumes = 19
enemy_costumes = []
enemy_speed = 1

i = 0

stopped = False
points = 0

firing = False
bullet_speed = 5

# sounds = []
sounds = {}

num_of_particles = 20
particle_speed = 5


def setup_window():
    window.title("Space Dodge")
    window.setup(window_width, window_height)
    window.bgpic("6_virus_war/Resources/Background/background.gif")
    window.tracer(0)


def setup_player():
    path = "6_virus_war/Resources/Player/player.gif"
    window.addshape(path)
    player.shape(path)
    player.penup()


def create_enemy():
    enemy = turtle.Turtle()
    enemies.append(enemy)
    enemy.shape(enemy_costumes[0])
    enemy.penup()
    enemy.speed(0)

    enemy.goto(
        random.randint(-window_width/2, window_width/2),
        random.randint(-window_height/2, window_height/2))
    enemy.setheading(random.randint(0, 360))


def setup_enemies():
    for i in range(num_of_enemy_costumes):
        path = f'6_virus_war/Resources/Enemy/Virus1/{i+1}.gif'
        window.addshape(path)
        enemy_costumes.append(path)
    for _ in range(3):
        create_enemy()


def setup_score():
    score.hideturtle()
    score.color('gray80')
    score.penup()
    score.goto(-window_width/2 + 10, window_height/2 - 30)
    score.write(f'Score: {points}', font=('Courier', 14, 'normal'))


def setup_bullet():
    bullet.shape('circle')
    # bullet.shapesize(stretch_wid=0.5, stretch_len=1)
    # bullet.shapesize(stretch_wid=0.5, stretch_len=0.5)
    # bullet.shapesize(stretch_wid=5, stretch_len=5)
    bullet.shapesize(stretch_wid=0.3, stretch_len=0.3)
    bullet.color('DarkOliveGreen2')
    bullet.penup()
    bullet.speed(0)
    bullet.hideturtle()


def setup_sounds():
    pygame.mixer.init()

    '''
    pygame.mixer.Sound('Resources/Sounds/fire.mp3')
    pygame.mixer.Sound('Resources/Sounds/killed.mp3')
    pygame.mixer.Sound('Resources/Sounds/gameover.mp3')
    '''

    '''
    sound = pygame.mixer.Sound('Resources/Sounds/fire.mp3')
    sounds.append(sound)
    sound = pygame.mixer.Sound('Resources/Sounds/killed.mp3')
    sounds.append(sound)
    sound = pygame.mixer.Sound('Resources/Sounds/gameover.mp3')
    sounds.append(sound)
    '''

    '''
    sounds.append(pygame.mixer.Sound('6_virus_war/Resources/Sounds/fire.mp3'))
    sounds.append(pygame.mixer.Sound(
        '6_virus_war/Resources/Sounds/killed.mp3'))
    sounds.append(pygame.mixer.Sound(
        '6_virus_war/Resources/Sounds/gameover.mp3'))
    '''

    sounds['fire'] = pygame.mixer.Sound(
        '6_virus_war/Resources/Sounds/fire.mp3')
    sounds['killed'] = pygame.mixer.Sound(
        '6_virus_war/Resources/Sounds/killed.mp3')
    sounds['gameover'] = pygame.mixer.Sound(
        '6_virus_war/Resources/Sounds/gameover.mp3')


def setup_particles():
    for _ in range(num_of_particles):
        particle = turtle.Turtle()
        particle.shape('circle')
        particle.shapesize(stretch_wid=0.1, stretch_len=0.1)
        particle.color(random.choice(
            ['orange', 'red3', 'goldenrod', 'salmon2', 'orchid2']))
        particle.penup()
        particle.hideturtle()
        particles.append(particle)


def switch_enemy_costume():
    global i
    if i == num_of_enemy_costumes:
        i = 0
    for enemy in enemies:
        enemy.shape(enemy_costumes[i])
    i += 1

    window.ontimer(switch_enemy_costume, 100)


def turn_left():
    # player.setheading(180)
    player.left(15)


def turn_right():
    # player.setheading(0)
    player.right(15)


def speedup():
    # player.setheading(90)
    global player_speed
    player_speed += 1


def slowdown():
    # player.setheading(270)
    global player_speed
    player_speed -= 1


def fire():
    global firing
    # print("Space pressed!")
    if not firing:
        # sounds[0].play()
        sounds['fire'].play()
        bullet.goto(player.xcor(), player.ycor())
        bullet.setheading(player.heading())
        bullet.showturtle()
        firing = True


def bind_keys():
    window.onkey(turn_left, "Left")
    window.onkey(turn_right, "Right")
    window.onkey(speedup, "Up")
    window.onkey(slowdown, "Down")
    window.onkey(fire, "space")
    window.listen()


def collide_with_edge(sprite):
    return sprite.xcor() >= window_width/2 or \
        sprite.xcor() <= -window_width/2 or \
        sprite.ycor() >= window_height/2 or \
        sprite.ycor() <= -window_height


def move_player():
    player.forward(player_speed)
    '''
    if player.xcor() >= window_width/2 or \
            player.xcor() <= -window_width/2 or \
            player.ycor() >= window_height/2 or \
            player.ycor() <= -window_height/2:
    '''
    if collide_with_edge(player):
        player.left(180+random.randint(-45, 45))


# def move_enemy():
def move_enemies():
    for enemy in enemies:
        enemy.forward(enemy_speed)
        '''
        if enemy.xcor() >= window_width/2 or \
                enemy.xcor() <= -window_width/2 or \
                enemy.ycor() >= window_height/2 or \
                enemy.ycor() <= -window_height/2:
        '''
        if collide_with_edge(enemy):
            enemy.left(180+random.randint(-45, 45))


def move_bullet():
    global firing
    '''
    bullet.forward(bullet_speed)
    #if bullet.xcor() >= window_width/2 or \
    #        bullet.xcor() <= -window_width/2 or \
    #        bullet.ycor() >= window_height/2 or \
    #        bullet.ycor() <= -window_height/2:
    if collide_with_edge(bullet):
        firing = False
    '''
    if firing:
        bullet.forward(bullet_speed)
        if collide_with_edge(bullet):
            firing = False


def move_particles():
    for particle in particles:
        particle.forward(particle_speed)


def check_collision():
    global stopped, firing
    for enemy in enemies:
        if player.distance(enemy) < 20:
            stopped = True
            return

    for enemy in enemies:
        if bullet.distance(enemy) < 20:
            # sounds[1].play()
            sounds['killed'].play()
            enemies.remove(enemy)
            enemy.hideturtle()
            firing = False
            bullet.hideturtle()
            for particle in particles:
                particle.goto(enemy.xcor(), enemy.ycor())
                particle.setheading(random.randint(0, 360))
                particle.showturtle()
            update_score()


def update_score():
    global points
    # points += 1
    points += 10

    score.clear()
    score.write(f"Score: {points}", font=("Courier", 14, "normal"))

    # window.ontimer(update_score, 1000)


def increase_enemy():
    create_enemy()
    window.ontimer(increase_enemy, 3000)


def game_loop():
    while True:
        if stopped:
            break

        move_player()
        move_enemies()
        move_bullet()
        check_collision()
        move_particles()

        window.update()
        time.sleep(0.01)
    # sounds[2].play()
    sounds['gameover'].play()


window = turtle.Screen()
player = turtle.Turtle()
enemies = []
score = turtle.Turtle()
bullet = turtle.Turtle()
particles = []

setup_window()
setup_player()
setup_enemies()
setup_score()
setup_bullet()
setup_sounds()
setup_particles()

bind_keys()

switch_enemy_costume()

# window.ontimer(update_score, 1000)
window.ontimer(increase_enemy, 3000)

game_loop()

window.mainloop()
